{
    // ${workspaceFolder} ${file}
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Arduino: syncronyze custom library",
            "type": "shell",
            "command": "cp library/* ~/Downloads/arduino-1.8.12/libraries/ -r && cp library/* ${workspaceFolder}/build/libraries -r"
        },
        {
            "label": "Docker: stop",
            "type": "shell",
            "command": "docker stop ${input:container}",
            "problemMatcher": []
        },
        {
            "label": "Docker: bash",
            "type": "shell",
            "command": "docker exec -it ${input:container} /bin/ash",
            "problemMatcher": []
        },
        {
            "label": "Docker: compose up",
            "type": "shell",
            "command": "docker-compose up",
        },
        {
            "label": "Docker: compose down",
            "type": "shell",
            "command": "docker-compose down",
        },
        {
            "label": "ESLint init",
            "type": "shell",
            "command": "npx eslint --init"
        },
        {
            "label": "React: setup development environment",
            "type": "shell",
            "command": "npm init -y && npm i react react-dom && npm i -D typescript @types/react @types/react-dom webpack webpack-cli awesome-typescript-loader && echo $'module.exports = {\\n  entry: \"./src/index.tsx\",\\n  target: \"web\",\\n  mode: \"development\",\\n  output: {\\n    path: `${__dirname}/out`,\\n    filename: \"index.js\",\\n  },\\n  resolve: {\\n    extensions: [\".js\", \".jsx\", \".ts\", \".tsx\"],\\n  },\\n  module: {\\n    rules: [\\n      {\\n        test: /\\.(ts|tsx)$/,\\n        loader: \"awesome-typescript-loader\",\\n      },\\n    ],\\n  },\\n};\\n'> webpack.config.js && echo $'{\\n  \"compilerOptions\": {\\n    /* Visit https://aka.ms/tsconfig.json to read more about this file */\\n    /* Basic Options */\\n    // \"incremental\": true,                   /* Enable incremental compilation */\\n    \"target\": \"es5\", /* Specify ECMAScript target version: \\'ES3\\' (default), \\'ES5\\', \\'ES2015\\', \\'ES2016\\', \\'ES2017\\', \\'ES2018\\', \\'ES2019\\', \\'ES2020\\', or \\'ESNEXT\\'. */\\n    // \"module\": \"commonjs\", /* Specify module code generation: \\'none\\', \\'commonjs\\', \\'amd\\', \\'system\\', \\'umd\\', \\'es2015\\', \\'es2020\\', or \\'ESNext\\'. */\\n    // \"lib\": [],                             /* Specify library files to be included in the compilation. */\\n    // \"allowJs\": true,                       /* Allow javascript files to be compiled. */\\n    // \"checkJs\": true,                       /* Report errors in .js files. */\\n    \"jsx\": \"react\", /* Specify JSX code generation: \\'preserve\\', \\'react-native\\', or \\'react\\'. */\\n    // \"declaration\": true,                   /* Generates corresponding \\'.d.ts\\' file. */\\n    // \"declarationMap\": true,                /* Generates a sourcemap for each corresponding \\'.d.ts\\' file. */\\n    \"sourceMap\": true,                     /* Generates corresponding \\'.map\\' file. */\\n    // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\\n    // \"outDir\": \"./out\", /* Redirect output structure to the directory. */\\n    // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\\n    // \"composite\": true,                     /* Enable project compilation */\\n    // \"tsBuildInfoFile\": \"./\",               /* Specify file to store incremental compilation information */\\n    // \"removeComments\": true, /* Do not emit comments to output. */\\n    // \"noEmit\": true,                        /* Do not emit outputs. */\\n    // \"importHelpers\": true,                 /* Import emit helpers from \\'tslib\\'. */\\n    // \"downlevelIteration\": true,            /* Provide full support for iterables in \\'for-of\\', spread, and destructuring when targeting \\'ES5\\' or \\'ES3\\'. */\\n    // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to \\'ts.transpileModule\\'). */\\n    /* Strict Type-Checking Options */\\n    \"strict\": true, /* Enable all strict type-checking options. */\\n    // \"noImplicitAny\": true, /* Raise error on expressions and declarations with an implied \\'any\\' type. */\\n    // \"strictNullChecks\": true,              /* Enable strict null checks. */\\n    // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\\n    // \"strictBindCallApply\": true,           /* Enable strict \\'bind\\', \\'call\\', and \\'apply\\' methods on functions. */\\n    // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\\n    // \"noImplicitThis\": true,                /* Raise error on \\'this\\' expressions with an implied \\'any\\' type. */\\n    // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\\n    /* Additional Checks */\\n    // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\\n    // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\\n    // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\\n    // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\\n    /* Module Resolution Options */\\n    // \"moduleResolution\": \"node\",            /* Specify module resolution strategy: \\'node\\' (Node.js) or \\'classic\\' (TypeScript pre-1.6). */\\n    // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\\n    // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the \\'baseUrl\\'. */\\n    // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\\n    // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\\n    // \"types\": [],                           /* Type declaration files to be included in compilation. */\\n    // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\\n    \"esModuleInterop\": true, /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies \\'allowSyntheticDefaultImports\\'. */\\n    // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\\n    // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\\n    /* Source Map Options */\\n    // \"sourceRoot\": \"\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\\n    // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\\n    // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\\n    // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires \\'--inlineSourceMap\\' or \\'--sourceMap\\' to be set. */\\n    /* Experimental Options */\\n    // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\\n    // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\\n    /* Advanced Options */\\n    \"skipLibCheck\": true, /* Skip type checking of declaration files. */\\n    \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\\n  }\\n}' > tsconfig.json && mkdir src && echo $'import React from \\'react\\'\\nimport { render } from \\'react-dom\\'\\n\\nrender(\\n    <p>test1</p>,\\n    document.getElementById(\\'app\\')\\n)' > src/index.tsx && echo $'<body>\\n  <div id=\"app\"></div>\\n  <script src=\"/out/index.js\"></script>\\n</body>' >> src/index.html && npx webpack && echo $'\\nSetup done! \\nRun `npx webpack --watch` to develop\\nStart coding index.tsx\\nWebpack automatically builds it to out/index.js,\\nServe index.html with any server'"
        },
        {
            "label": "TypeScript: build",
            "type": "shell",
            "command": "npx tsc -p tsconfig.json"
        },
        {
            "label": "TypeScript: create .d.ts",
            "type": "shell",
            "command": "npx tsc -d ${file}"
        },
        {
            "label": "TypeScript: convert relative import to absolute",
            "type": "shell",
            "command": "sed -i -r 's/import(.*)from(.*)(\\.\\/)(.*)/import\\1from\\2${workspaceFolder}\\4/g' ${file}"
        },
        {
            "label": "Webpack: watch",
            "type": "shell",
            "command": "npx webpack --watch",
            "problemMatcher": []
        },
    ],
    "inputs": [
        {
            "id": "container",
            "description": "name of container",
            "default": "lwt-web-concierge_web_1",
            "type": "promptString",
        }
    ]
}
